---
title: "ANOVA: Part 2"
author: "Dr. Jacob C. Cooper"
format: html
editor: visual
---

## Two-way ANOVA

Previously, we discussed one-way ANOVAs, where we are looking at a single factor split across three or more groups and trying to determine if the means of these groups are equal (*i.e.*, $H_0: \mu_1=\mu_2=...\mu_i$). ANOVA specifically allows us to analyze the variance of these different groups to ascertain which factors are most responsible for the variation we observe in the data. Because of the way ANOVA operates, we can actually test multiple different combinations of variables simultaneously in what we call a *two-way ANOVA*.

Don't forget to load your required packages - some we have used before, like `agricolae`, `plyr`, and `tidyverse`, but others are new for this section: `multcomp` and `nlme`! As a reminder, these packages are designed for the following:

-   `agricolae`: originally written as a Master's thesis at the Universidad Nacional de Ingeniería (Lima, Perú), this package is designed to help with agricultural research.
-   `plyr`: tools for common problems, including splitting data, applying functions across data, and combining datasets together.
-   `tidyverse`: one we are already familiar with; a wrapper for installing `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, and `forcats`.
-   `multcomp`: more in depth and better **MULT**iple **COMP**arisons via linear models and related models.
-   `nlme`: a package for fitting Gaussian and **n**on-**l**inear **m**ixed-**e**ffect models.
- `PMCMRplus`: a math package with post-hoc tests for Friedman's test

```{r, message = F}
library(agricolae)
library(plyr)
library(tidyverse)

# NEW PACKAGES NEEDED
# Don't forget to install these on your machine
library(multcomp)
library(nlme)
library(PMCMRplus)
```

## Designs

There are several different designs for two-way ANOVAs, and we will cover some of the most common designed here.

For these examples, we are going to randomly generated examples. I will refer to the variables as `Response` and `Explanatory` for simplicity's sake.

### Randomized block design

Randomized block designs look at combinations of variables that could be affecting the results. More specifically, we are looking at two *strata* or *factors* and their effects on a *continuous* response variable.

```{r}
set.seed(8675309)

# random example

# Blocking variable
Blocking_Variable <- c("Group 1", "Group 2", "Group 3")

# explanatory variables
# these are your columns
# these are your primary hypothesis
Explanatory_1 <- c(10.1, 9.4, 11.1)
Explanatory_2 <- c(12, 13.0, 15.4)
Explanatory_3 <- c(11.2, 10.1, 11.9)

# create "data table" as we normally see it
# combine all columns
data_expanded <- cbind(Blocking_Variable,
                       Explanatory_1,
                       Explanatory_2,
                       Explanatory_3) %>% 
  as.data.frame() # create data frame

data_expanded
```

*Note* that this table is in the format that we most often see, but we need to reshape these data to make it easier for us to perform our analyses. I created the data here as a matrix with named columns and rows; the following code may need to be adjusted if you do things differently.

```{r}
# expand to "long" format
# if not done earlier, convert to data frame

data <- data_expanded %>%
  # !by column for aggregating
  # names_to = what to name column aggregation
  # values_to = what the measurements should be called
  pivot_longer(!Blocking_Variable, names_to = "Explanatory_Variables", values_to = "Measurements")

data
```

Now we can do our ANOVA. ***Note*** that I put `factor` around the blocking variable.

```{r}
# mark block by factor
# best to always use
data_aov <- aov(Measurements ~ Explanatory_Variables + factor(Blocking_Variable), data)

summary(data_aov)
```

In this particular example, the blocking variable does not significantly differ, however the explanatory variable does differ.

**Remember, the columns represent your *primary hypothesis*. You will only plot your results if your *primary hypothesis is significant!***

Given that our primary null hypothesis is rejected (that is to say, not all means are equal), we need to plot our results.

To determine which mean(s) differ, we will use a Tukey Test. Unfortunately, the `agricolae` function `HSD.test` does not work as well for these multi-directional ANOVAs, so we need to use `TukeyHSD`.

```{r}
tukey_data_aov <- TukeyHSD(data_aov)

tukey_data_aov
```

As we can see above, each pairwise comparison is given a $p$ value for the level of difference. We need to manually label these groups based on these $p$ values, with groups being considered different if $p < 0.05$. We can do this as follows, but unfortunately, we need to do it by hand since we don't have a short-form code (*yet*) for this conversion.

```{r}
# change Explanatory_Variables to your data
Treatments <- unique(data$Explanatory_Variables)

sig_labels <- Treatments %>% 
  as.data.frame() %>% 
  mutate(Significance = rep(NA, length(Treatments)))

# Change Explanatory_Variables to your data
colnames(sig_labels) <- c("Explanatory_Variables", # MUST BE SAME AS DATA
                          "Significance")

tukey_data_aov$Explanatory_Variables
```

**NOTE** that I am going to have to adjust column names and variable names a few times. Based on the above, we can see that `Explanatory_3` and `Explanatory_1` are not different from each other, but everything else is in a different group relative to each other. We can label these by hand.

```{r}
sig_labels$Significance <- c("A", "B", "A")

sig_labels
```

As we can see above, now only `Explanatory_2` is given a different letter category.

Now, we can plot these different factors.

```{r}
# summarize by group
# slight adjustment from previous
summary_data <- ddply(data, "Explanatory_Variables", summarise,
                          N = length(as.numeric(Measurements)),
                          mean = mean(as.numeric(Measurements)),
                          sd = sd(as.numeric(Measurements)),
                          se = sd / sqrt(N))

summary_data
```

```{r}
# SET Y LIMITS
# change based on observed data
ylims <- c(0, 20)

# set label height, can change before plotting function
label_height <- 4

ggplot(summary_data, # plot summary data
       # Define plotting - x by group, y is mean, grouping by group
       aes(x = Explanatory_Variables, y = mean)) +
  # add points to plot for y values
  geom_point() +
  # add error bars around points
  geom_errorbar(data = summary_data, 
                # define error bars
                aes(ymin = mean - 2*se, ymax = mean+2*se), 
                # width of bar
                width = 0.1) +
  # set vertical limits for plot
  ylim(ylims) +
  # make it a classic theme - more legible
  theme_classic() +
  # add text to plot
  geom_text(data = sig_labels,
            # make bold
            fontface = "bold",
            # define where labels should go
            aes(x = Explanatory_Variables, 
                # define height of label
                y = 4, 
                # what are the labels?
                label = paste0(Significance))) +
  xlab("Treatment") +
  ylab("Mean") +
  # remove legend - not needed here
  theme(legend.position = "none",
        # make label text vertical, easier to read
        axis.text.x = element_text(angle = 90, 
                                   # vertical offset of text
                                   vjust = 0.5, 
                                   # text size
                                   size = 12))
```

### Repeated measures

Now, we are going to do a *repeated measures ANOVA*, where we have the same individuals being measured multiple times. Consider the following imaginary dataset:

```{r}
Visit_1 <- c(5.5,6.2,5.8)
Visit_2 <- c(4.6,5.4,5.2)
Visit_3 <- c(3.8,4.0,3.9)

Individuals <- c(paste0("Individual"," ",1:3))

data <- cbind(Individuals, 
                   Visit_1,
                   Visit_2,
                   Visit_3) %>%
  as.data.frame() %>% 
  pivot_longer(!Individuals,
               names_to = "Visits",
               values_to = "Measurements")

data
```

We need to perform the ANOVA again, but we need to account for the factor of which locations are repeated.

```{r}
repeated_aov <- aov(Measurements ~ factor(Visits) + Error(factor(Individuals)), data)

summary(repeated_aov)
```

Unfortunately, because of the model this is, we cannot perform a Tukey Test on the "object" that is created from this ANOVA analysis. We can, however, approach this from a different direction and get our Tukey results ([thanks to Henrik on StackOverflow!](https://stats.stackexchange.com/questions/14078/post-hoc-test-after-anova-with-repeated-measures-using-r)). **For this to work, we need to install the packages `nlme` and `multcomp`.**

```{r}
# ensure data is proper format
data$Individuals <- as.factor(data$Individuals)
data$Visits <- as.factor(data$Visits)
data$Measurements <- as.numeric(data$Measurements)
```

The next part of the code fits a *linear model* to the data. A linear model, which we will cover later in the class, is mathematically very similar to an ANOVa. However, we can data from this model and extract the ANOVA data to understand more about the interactions. We need to use a linear model for this to account with the relationships between the two.

```{r}
# fit a linear mixed-effects model
# similar to ANOVA

lme_data <- lme(Measurements ~ Visits, 
                         data = data, 
                         # define repeated section
                         random = ~1|Individuals)

# perform ANOVA on model
anova(lme_data)
```

As we can see above, we can get the ANOVA results from this linear mixed-effects model fit to the dataset. Now, we need to know post-hoc which sets are different:

```{r}
lme_data %>%
  # "general linear hypothesis"
  # define a comparison to make
  # can add corrections like test = adjusted (type = "bonferroni")
  glht(linfct = mcp(Visits = "Tukey")) %>%
  # return a summary of the above
  summary()
```

We can see that every visit is different.

```{r}
# manually labeling

sig_levels_repeated <- matrix(data = c("Visit_1", "A",
                                       "Visit_2", "B",
                                       "Visit_3", "C"), 
                              byrow = T, ncol = 2) %>% as.data.frame()

# make labels match!
colnames(sig_levels_repeated) <- c("Visits", "Significance")
```

Let's plot these. *Note* that we are not summarizing these the same way, since things are varying based on individual as well.

*Note*: For reasons I am not certain, you need to put the locations and then `ggplot` uses these colors to define everything. I really don't know why this is happening, so if you have a solution, let me know.

```{r}
summary_data <- ddply(data, "Visits", summarise,
                          N = length(as.numeric(Measurements)),
                          mean = mean(as.numeric(Measurements)),
                          sd = sd(as.numeric(Measurements)),
                          se = sd / sqrt(N))

```

```{r}
ggplot(summary_data,
       aes(x = Visits, y = mean)) +
  geom_point() +
  geom_errorbar(data = summary_data, 
                # define error bars
                aes(ymin = mean - 2*se, ymax = mean+2*se), 
                # width of bar
                width = 0.1) +
  # set vertical limits for plot
  ylim(c(0,10)) +
  # make it a classic theme - more legible
  theme_classic() +
  # add text to plot
  geom_text(data = sig_levels_repeated,
            # make bold
            fontface = "bold",
            # define where labels should go
            aes(x = Visits, 
                # define height of label
                y = 2, 
                # what are the labels?
                label = paste0(Significance))) +
  xlab("Visits") +
  ylab("Measurement") +
  # remove legend - not needed here
  theme(legend.position = "none",
        # make label text vertical, easier to read
        axis.text.x = element_text(angle = 90, 
                                   # vertical offset of text
                                   vjust = 0.5, 
                                   # text size
                                   size = 12))
```

### Factorial ANOVA

Mathematically, a factorial ANOVA is the same as a randomized block ANOVA; please see that section for information on how to run this test.

### ANOVA with interaction

Sometimes when we running a model, we want to look for *interactive effects*. Interactive effects are situations where one (or both) variables on their own do not effect the data, but there is a cumulative effect between variables that effects things. Let's look at an example, based on our initial example but with the data altered.

```{r}
set.seed(8675309)

# we are using data from the randomized black ANOVA again

data_expanded
```

```{r}
### YOU DO NOT NEED TO DO THIS
### CREATING DATA FOR EXAMPLE

data_expanded$Explanatory_1 <- as.numeric(data_expanded$Explanatory_1)
data_expanded$Explanatory_2 <- as.numeric(data_expanded$Explanatory_2)
data_expanded$Explanatory_3 <- as.numeric(data_expanded$Explanatory_3)

# create some pseudorandom data
# [,-1] excludes first column - group data
data_expanded2 <- cbind(Blocking_Variable,
                        data_expanded[,-1] - 0.75)
data_expanded3 <- cbind(Blocking_Variable,
                        data_expanded[,-1]*1.05)

data_expanded <- rbind(data_expanded,
                       data_expanded2,
                       data_expanded3)

# expand to "long" format
data <- data_expanded %>%
  # convert to data frame
  as.data.frame() %>%
  # !by column for aggregating
  # names_to = what to name column aggregation
  # values_to = what the measurements should be called
  pivot_longer(!Blocking_Variable, names_to = "Treatments", values_to = "Measurements")

# specifying factor to be safe

interactive_aov <- aov(Measurements ~ factor(Treatments) + 
                         factor(Blocking_Variable) + 
                         factor(Treatments)*factor(Blocking_Variable), 
                       data)

summary(interactive_aov)
```

As we can see above, we have very significant effects for `Treatment` and `Blocking_Variable`, but a less significant effect for the interaction between the two. **Remember - we only need to plot our primary hypothesis**. **Note** however, that Tukey gives us our differences and $p$ values for each set of tests and comparisons:

```{r}
TukeyHSD(interactive_aov)
```

I do not plot this here, but it would be similar to the other parts of this test.

## Friedman's test

### Using *R*

Friedman's test is a non-parametric alternative to a two-way ANOVA, so as you would guess, it can be painful to implement. We will use an altered version of the same test we've used before:

```{r}
# set seed - make reproducible
set.seed(8675309)

### DO NOT NEED TO REPEAT THIS
### CREATING DATA FOR EXAMPLE 

# new set of foods - this time, ten of them
Treatments <- c(paste("Treatment",1:10)) %>%
  as.factor()

# pre-created data frame of locations from earlier
Blocking_Factor <- c(paste("Block", 1:10)) %>%
  as.factor()

long_data <- crossing(Blocking_Factor, Treatments)

long_data$Measurements <- NA

for(i in 1:length(unique(long_data$Treatments))){
  subset_rows <- which(long_data$Treatments==long_data$Treatments[i])
  long_data$Measurements[subset_rows] <- runif(n = length(subset_rows),
                                               min = i-2, max = i+2) %>% 
    round(1)
}

long_data
```

Now that we have our expanded and randomized table, we can get started with our test.

Our calculation for the Friedman's test statistic $Q$ (not to be confused with Tukey's $q$!) is: $$Q = \frac{12}{nk(k+1)} \cdot \Sigma R_j^2 - 3n(k+1)$$

where $n$ is the total number of individuals in each sample in the dataset, $k$ is the number of groups, and $R_j^2$ is the sum of the ranks.

**In this class, we will do this in *R*.**

```{r}
friedman_long_data <- friedman.test(y = long_data$Measurements,
                                    groups = long_data$Treatments,
                                    blocks = long_data$Blocking_Factor)

print(friedman_long_data)
```

*Note* you will get a different answer if you are switching the blocks and the groups.

We can use the following, from package `PMCMRplus`, to find the adjacent and non-adjacent groups.

```{r}
# find differences
frdAllPairsConoverTest(y = long_data$Measurements,
                       groups = long_data$Treatments,
                       blocks = long_data$Blocking_Factor, 
                       p.adjust.method = "bonf")
```

As we can see, some pairs are inseparable and others are separable. We can now plot as for the other problems.

## Homework: Chapter 12

For problems 12.1, 12.2, 12.3, 12.4, and 12.5, state your hypotheses in sentence form and mathematically. Then, identify the appropriate ANOVA and perform the analysis. If you reject the null, complete a Tukey test and plot your results, showing letters denoting each group. **Note** that 12.4 requires a Friedman's test, but all other problems require some form of ANOVA.

Next, for problems 12.7, 12.8, and 12.9, identify the appropriate test and justify your reasoning. State the null and alternative hypothesis in word form and mathematically, and perform your analysis. If you perform an ANOVA *and* you reject the null hypothesis, plot your results and label the groups by letter.

**Remember, only plot the results if you reject your *primary hypothesis*.**
