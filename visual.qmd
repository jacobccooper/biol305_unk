---
title: "Diagnosing data visually"
author: "Dr. Jacob C. Cooper"
format: html
editor: visual
---

## The importance of visual inspection

Inspecting data visually can give us a lot of information about whether data are normally distributed and about whether there are any major errors or issues with our dataset. It can also help us determine if data meet model assumptions, or if we need to use different tests more appropriate for our datasets.

## Sample data and preparation

First, we need to load our *R* libraries.

```{r}
library(curl)
library(tidyverse)
```

Next, we can download our data sample.

## Histograms

A histogram is a frequency diagram that we can use to visually diagnose data and their distributions. We are going to examine a histogram using a random string of data. *R* can generate random (though, actually pseudorandom) strings of data on command, pulling them from different distributions. These distributions are pseudorandom because we can't actually program *R* to be random, so it starts from a wide variety of pseudorandom points.

### Histograms on numeric vectors

The following is how to create default histograms on data. If you need to create custom bin sizes, please see the notes under *Cumulative frequency plots* for data that are not already in frequency format.

```{r}
# create random string from normal distribution
# this step is not necessary for data analysis in homework
x <- rnorm(n = 1000, # 1000 values
           mean = 0,
           sd = 1)

# make histogram
hist(x)
```

**NOTE** that a histogram can only be made on a vector of values. If you try to make a histogram on a data frame, *you will get an error and it will not work*. You have to specify which column you wish to use with the `$` operator. (For example, for dataframe `xy` with columns `x` and `y`, you would use `hist(xy$y)`).

We can up the number of bins to see this better.

```{r}
hist(x,breaks = 100)
```

The number of bins can be somewhat arbitrary, but a value should be chosen based off of what illustrates the data well. *R* will auto-select a number of bins in some cases, but you can also select a number of bins. Some assignments will ask you to choose a specific number of bins as well.

### Histograms on frequency counts

Say, for example, that we have a dataset where everything is already shown as frequencies. We can create a frequency histogram using `barplot`.

```{r}
count_table <- matrix(nrow = 4, ncol = 2, byrow = T,
                      data = c("Cat 1", 4,
                               "Cat 2", 8,
                               "Cat 3", 7,
                               "Cat 4", 3)) %>%
  as.data.frame()

colnames(count_table) <- c("Category","Count")

# ensure counts are numeric data
count_table$Count <- as.numeric(count_table$Count)

# manually create histogram
barplot(count_table$Count, # response variable, counts for histogram
        axisnames = T, # make names on plot
        names.arg = count_table$Category) # make these the names
```

### ggplot histograms

The following is an ***optional*** workthrough on how to make really fancy plots.

We can also use the program `ggplot`, part of the `tidyverse`, to create histograms.

```{r}
# ggplot requires data frames
x2 <- x %>% as.data.frame()
colnames(x2) <- "x"

ggplot(data = x2, aes(x = x)) +
  geom_histogram()
```

`ggplot` is nice because we can also clean up this graph a little.

```{r}
ggplot(x2,aes(x=x)) + geom_histogram() +
  theme_minimal()
```

We can also do a histogram of multiple values at once in *R*.

```{r}
x2$cat <- "x"

y <- rnorm(n = 1000,
           mean = 1,
           sd = 1) %>%
  as.data.frame()

colnames(y) <- "x"
y$cat <- "y"

xy <- rbind(x2,y)

head(xy)
```

```{r}
ggplot(xy,aes(x = x, fill = cat)) +
  geom_histogram()
```

We can also make this look a little nicer.

```{r}
ggplot(xy, aes(x = x, colour = cat)) +
  geom_histogram(fill = "white", alpha = 0.5, # transparency
                 position = "identity") +
  theme_classic()
```

We can show these a little differently as well.

```{r}
ggplot(xy, aes(x = x, fill = cat))+
  geom_histogram(position = "identity", alpha = 0.5) +
  theme_minimal()
```

There are lots of other commands you can incorporate as well if you so choose; I recommend checking [sites like this one](http://www.sthda.com/english/wiki/ggplot2-histogram-plot-quick-start-guide-r-software-and-data-visualization).

## Skewness

Skew is a measure of how much a dataset "leans" to the positive or negative directions (*i.e.*, to the "left" or to the "right"). To calculate skew, we are going to use the `moments` library.

```{r}
# don't forget to install if needed!
library(moments)

skewness(x)
```

Generally, a **value between** $-1$ **and** $+1$ **for skewness is "acceptable"** and not considered overly skewed. Positive values indicate "right" skew and negative values indicate a "left" skew. If something is too skewed, it may violate assumptions of normality and thus need *non-parametric* tests rather than our standard parametric tests - something we will cover later!

Let's look at a skewed dataset. We are going to artificially create a skewed dataset from our `x` vector.

```{r}
# create more positive values
x3 <- c(x,
        x[which(x > 0)]*2,
        x[which(x > 0)]*4,
        x[which(x > 0)]*8)

hist(x3)
```

```{r}
skewness(x3)
```

As we can see, the above is a heavily skewed dataset with a positive ("right") skew.

## Kurtosis

Kurtosis refers to how sharp or shallow the peak of the distribution is (*platykurtic* vs. *leptokurtic*). Remember - *platy*kyrtic are *plateau*kurtic, wide and broad like a plateau, and *leptokurtic* distributions are sharp. Intermediate distributions that are roughly normal are *mesokurtic*.

Much like skewness, **kurtosis values of** $> 2$ **and** $< -2$ **are generally considered extreme**, and thus not mesokurtic. This threshold can vary a bit based on source, but for this class, we will use a threshold of $\pm 2$ for both skewness and kurtosis.

Let's see the kurtosis of `x`. ***Note*** that when doing the equation, a normal distribution actually has a kurtosis of $3$; **thus, we are doing kurtosis** $-3$ **to "zero" the distribution and make it comparable to skewness**.

```{r}
hist(x)
```

```{r}
# non-zeroed
kurtosis(x)
```

```{r}
# zeroed
kurtosis(x)-3
```

As expected, out values drawn from a normal distribution are not overly skewed. Let's compare these to a more kurtic distribution:

```{r}
xk <- x^3

kurtosis(xk)-3
```

What does this dataset look like?

```{r}
hist(xk,breaks = 100)
```

As we can see, this is a very *leptokurtic* distribution.

## Cumulative frequency plot

A *cumulative frequency plot* shows the overall spread of the data as a cumulative line over the entire dataset. This is another way to see the spread of the data and is often complementary to a histogram.

The following cumulative distribution plot is based on the method outlined in [Geeks for Geeks](https://www.geeksforgeeks.org/cumulative-frequency-graph-in-r/).

### If data are not in histogram/frequency format

You will need to create a frequency table to make them be in histogram format.

```{r}
# declaring the break points
# make break points based on data
# always round UP with ceiling
range.x <- ceiling(max(x)-min(x))

range.x
range(x)
```

Based on this range, we need to create our bin sizes. We want our lowest bin to be below our lowest value, and our highest bin above our highest value. Here, I'm setting a step size of 1. **You will have to examine your data and determine the best break size for your datasets.**

```{r}
# make bins based on range
# create sequential series
break_points <- seq(-3, # starting value, low
                    4, # end value, high
                    1) # increment size
```

```{r}
# transforming the data
data_transform = cut(x, # your data!
                     break_points, # the breaks you defined
					right=FALSE) # closed on the left for intervals
# creating the frequency table
freq_table = table(data_transform) # create a table

# printing the frequency table
print("Frequency Table")
print(freq_table)
```

```{r}
# calculating cumulative frequency
cumulative_freq = c(0, # start at 0, no points
                    cumsum(freq_table)) # get the cumulative frequency!
print("Cumulative Frequency")
print(cumulative_freq)
```

```{r}
# plotting the data
plot(break_points, # x axis is break_points
     cumulative_freq, # y axis is cumulative frequency
	xlab="Data Distribution", # x axis label
	ylab="Cumulative Frequency") # y axis label
# creating line graph
lines(break_points, # add lines to the graph, this is x
      cumulative_freq) # this is y for lines
```

### If data are in histogram/frequency format

If you have a list of frequencies (say, *for river discharge over several years*), you only need to do the `cumsum` function. For example:

```{r}
y <- c(1 ,2 ,4, 8, 16, 8, 4, 2, 1)

sum_y <- cumsum(y)

print(y)
print(sum_y)
```

Now we can see we have out cumulative sums. Let's plot these. **NOTE** that this method will *not* have the x variables match the dataset you started with, it will only plot the curve based on the number of values given.

```{r}
plot(x = 1:length(sum_y), # get length of sum_y, make x index
     y = sum_y, # plot cumulative sums
     type = "l") # make a line plot
```

## Homework: Chapter 3

From your book, complete problems 3.1, 3.4 & 3.5. Data for these problems are available on *Canvas* and in your book.

### Helpful hint

**HINT**: For 3.5, consider just making a vector of the values of interest for a histogram.

For example, see the following. For reference:

-   `c` means "concatenate", or place things together in an object.

```{r}
# numeric vector data for counts
y <- c(17,24,16)

# manually create a histogram using barplot
barplot(y, 
        # axis names must be true
        axisnames = T, 
        # input names here
        # each category as a separate quoted character string
        names.arg = c("Cat 1", "Cat 2", "Cat 3"))
```

### Directions

Please complete all computer portions in an `rmarkdown` document knitted as an html. Upload any "by hand" calculations as images in the HTML or separately on *Canvas*.

## Addendum

With thanks to Hernan Vargas & Riley Grieser for help in formatting this page. Additional comments provided by BIOL 305 classes.
