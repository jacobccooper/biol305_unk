---
title: "Intro to *R*"
author: "University of Nebraska at Kearney Biology"
---

In this class, we will be using *R* to perform statistical analyses. *R* is a free software program designed for use in a myriad of statistical and computational scenarios. It can handle extremely large datasets, can handle spatial data, and has wrappers for compatibility with *Python*, *Bash*, and other programs (even *Java*!).

## Setup

First, we need to download *R* onto your machine. We are also going to download *RStudio* to assist with creating *R* scripts and documents.

### Installing *R*

First, navigate to the [*R* download and install page](https://cloud.r-project.org/). Download the appropriate version for your operating system (Windows, Mac, or Linux). **Note** that coding will be formatted slightly different for Windows than for other operating systems. If you have a Chromebook, you will have to [follow the online instructions for installing both programs on Chrome](https://levente.littvay.hu/chromebook/).

Follow the installation steps for *R*, and verify that the installation was successful by searching for *R* on your machine. You should be presented with a coding window that looks like the following, but may not be an exact match:

```         
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>
```

If that screen appears, congratulations! *R* is properly installed. If the install was not successful, please talk to your instructor and teaching assistant(s) for help with installation.

### Installing *RStudio*

*RStudio* is a GUI (graphics user interface) that helps make *R* easier to use. Furthermore, it allows you to create documents in *R*, including websites (such as this one), PDFs, and even presentations. This can greatly streamline the research pipeline and help you publish your results and associated code in a quick and efficient fashion.

Head over the the [*RStudio* download website](https://posit.co/downloads/) and download "*RStudio* Desktop", which is free. Be sure to pick the correct version for your machine.

Open *RStudio* on your machine. You should be presented with something like the following:

![*RStudio* start window. Note that the screen is split into four different quadrants. Top left: *R* documents; bottom left: *R* program; top right: environment window; bottom right: plots, help, and directories.](images/rstudio_start.png){fig-align="center"}

In *RStudio*, the top left window is always going to be our coding window. This is where we will type all of our code and create our documents. In the bottom left we will see *R* executing the code. This will show what the computer is "thinking" and will help us spot any potential issues. The top right window is the "environment", which shows what variables and datasets are stored within the computers' memory. (It can also show some other things, but we aren't concerned with that at this point). The bottom right window is the "display" window. This is where plots and help windows will appear if they don't appear in the document (top left) window itself.

### Setting up the "native pipe" operator

There are two ways to type commands in *R*: in a "nested" fashion and in a "piped" fashion.

Let's say that we have a random series of 100 numbers from a random normal distribution, which we can get by running the following:

```{r}
# make repeatable
set.seed(42)
# get 100 values from normal
x <- rnorm(100)
```

Let's say that we want to get the mean of these values *and* round these values to two decimal places for our final answer. To do this in a nested fashion, we would do the following:

```{r}
# round mean of x
round(mean(x), 2)
```

This works pretty well, but it can get confusion with so many parentheses over each other. Thus, we can use the "pipe" method instead.

In *RStudio*, click on the tabs at the top of the screen to go to Tools \> Global Options, and in the pop up screen select Code. On this screen, you should see a tick box for "Use native pipe operator". Make sure this box is checked. Now, we can use `CTRL` + `SHIFT` + `M` to insert the "pipe" operator `|>`.

The pipe operator takes whatever came previous and puts it through the next command. For example, `mean(x)` could also be written as `x |> mean()`, where `x` would be placed inside of `mean()`.

```{r}
x |> 
  mean() |> 
  round(2)
```

As you can see, the above breaks things down into a more step-by-step fashion, and makes code easier to follow. We will be using this extensively in this course.

## Creating an *RMarkdown* document

### Setup

In this class, we will be creating assignments in what is called *RMarkdown*. This is a rich-text version of *R* that allows us to create documents with the code embedded. In *RStudio*, click the "+" button in the far top left to open the `New Document` menu. Scroll down this list and click on `R Markdown`.

A screen such as this will appear:

![A new file window for an *RMarkdown* file.](images/newfile.png)

After entering a title and your name and selecting `document` in the left hand menu, click `OK`.

![An example of a markdown script.](images/markdown.png)

In the image above, we can see what a "default" *RMarkdown* script looks like after creating the file. At the top of the document, between all of the dashes, we have the `yaml` header that tells *R* what kind of document will be created, who the author is, and tells it to use today's date. In this class, we will be saving documents as `html` as they are the easiest documents to create and save. These documents will include all of your code, text, and even any plots you may create!

Plain text in the document will be rendered as plain text in the document. (I.e., whatever you type normally will become "normal text" in the finished document). Lines preceded with `#` will become headers, with `##` being a second level header and `###` being a third level header, etc. Words can also be made italic by putting an asterisk on each side of the word (`*italic*`) and bold by putting two asterisks on each side (`**bold**`). URLs are also supported, with `<>` on each side of a URL making it clickable, and words being hyperlinked by typing `[words to show](target URL)`.

We also have code "chunks" that are shown above. A code chunk can be manually typed out or inserted by pressing `CTRL` + `ALT` + `I` (Windows, Linux) or `COMMAND` + `OPTION` + `I` (Mac). Everything inside a "code chunk" will be read as *R* code and executed as such. Note that you can have additional commands in the *R* chunks, but we won't cover that for now.

### Using code chunks

In your computer, erase all information except for the `yaml` header between the dashes at the top of the document. `Save` your file in a folder where you want your assignment to be located. It is important you do this step up front as the computer will sometimes save in random places if you don't specify a file location at the beginning. *Don't forget to save your work frequently*!

After clearing the document, type the following at the top, exactly as shown. You can insert a code chunk (the `{r}` part framing the code with hashes before and after) by clicking `CTRL`+`ALT`+`I` (`CMD`+`OPT`+`I` on a Mac).

![Text to type in your *Rmarkdown* document.](images/test_text.png)

After typing this into the document, hit `knit` near the top of the upper left window. *R* will now create an HTML document that should look like this:

![The output from the above code knitted into a document.](images/test1.png)

We can see now that the `HTML` document has the title of the document, the author's name, the date on which the code was run, and a greyed-out box with color coded *R* code followed by the output. Let's try something a little more complex. Create a new code chunk and type the following:

```{r}
x <- 1:10
```

This will create a variable in *R*, `x`, that is sequentially each whole number between 1 and 10. We can see this by highlighting or typing only the letter `x` and running that line of code by clicking `CTRL` + `ENTER` (Windows / Linux) or `COMMAND` + `ENTER` (Mac).

```{r}
x
```

If you look at the top right window, you will also see the value `x` in the environment defined as `int [1:10] 1 2 3 4 5 6 7 8 9 10`. This indicates that `x` is integer data spanning ten positions numbered 1 to 10. Since the vector is small, it displays every number in the sequence.

![*RStudio* environment window showing saved objects. These are in the computer's memory.](images/environment.png)

Let's create another vector `y` that is the squared values of `x`, such that $y=x^2$. We can raise values to an exponent by using `^`.

```{r}
y <- x^2
y
```

Now we have the value `y` in the environment that is the square of the values of `x`. This is a `numeric` vector of 10 values numbered 1 to 10 where each value corresponds to a square of the `x` value. We can raise things to any value however, including $x^x$!

```{r}
x^x
```

As we can see, since I didn't "store" this value as a variable in *R* using `<-`, the value is not in the environment.

### Plotting

Now, let's try creating a plot. This is easy in *R*, as we just use the command `plot`.

```{r}
plot(x = x, y = y)
```

By specifying the `y` and `x` components in `plot`, we can quickly generate a point plot. We can alter the visual parameters of this plot using a few different commands. I will outline these below with inline notes. Inline notes in the code can be made by using a `#` symbol before them, which basically tells *R* to ignore everything after the `#`. For example:

```{r}
print("Test")
# print("Test 2")
```

This prints the word `Test`, but doesn't print `Test 2`.

Now let's make the plot with some new visual parameters.

```{r}
plot(x = x, # specify x values
     y = y, # specify y values
     ylab = "Y Values", # specify Y label
     xlab = "X Values", # specify X label
     main = "Plot Title", # specify main title
     pch = 19, # adjust point style
     col = "red") # make points red
```

### Tab complete

*RStudio* allows for "tab-completing" while typing code. Tab-completing is a way of typing the first part of a command, variable name, or file name and hitting "tab" to show all options with that spelling. You should use tab completing because it:

-   reduces spelling mistakes
-   reduces filepath mistakes
-   increases the speed at which you code
-   provides help with specific functions

### Help

At any point in *R*, you can look up "help" for a specific function by typing `?functionname`. Try this on your computer with the following:

```{r,eval = F}
?mean
```

## Working with data

Throughout this course, we are going to have to work with datasets that are from our book or other sources. Here, we are going to work through an example dataset. First, we need to install *libraries*. A *library* is a collated, pre-existing batch of code that is designed to assist with data analysis or to perform specific functions. These *libraries* make life a lot easier, and create short commands for completing relatively complex tasks.

### Libraries

In this class, there is one major library that you will need *almost every week*! First, we need to install this library:

1.  `tidyverse`: this package is actually a [group of packages](https://www.tidyverse.org/) designed to help with data analysis, management, and visualization.

**NOTE: If you leave the install prompts in your RMarkdown document, *it will not knit!***

```{r, eval=FALSE}
# run this code the first time ONLY
# DO NOT INCLUDE IN RMD FILE
# does not need to be run every time you use R!

# tidyverse has a bunch of packages in it!
# great for data manipulation
install.packages("tidyverse")

# if you ever need to update:
# leaving brackets open means "update everything"
update.packages()
```

**NOTE: The following is required in EVERY DOCUMENT that uses the `tidyverse` commands!**

After packages are installed, we will need to load them into our *R* environment. While we only need to do `install.packages` once on our machine, **we need to load libraries *every time we restart the program!***

```{r}
library(tidyverse)
```

You should have an output like the above. What this means is:

1.  The core packages that comprise the tidyverse loaded successfully, and version numbers for each are shown.
2.  The conflicts basically means that certain commands will not work as they used to because *R* has "re-learned" a particular word.

#### Conflicts

To clarify the conflicts, pretend that you can only know one definition of a word at a time. You may know the word "cola" as a type of soda pop or as a drink in general. However, in Spanish, "cola" refers to a line or a tail. While we can learn both of these definitions and know which one is which because of context, a computer can't do that. In *R*, we would then have to specify which "cola" we are referring to. We do this by listing the package before the command; in this case, `english::cola` would mean a soda pop and `spanish::cola` would refer to a line or tail. If we just type `cola`, the computer will assume one of these definitions but not even consider the other.

We won't have to deal with conflicts much in this class, and I'll warn you (or help you) if there is a conflict.

### Downloading data

Now, we need to download our first data set. These datasets are stored on GitHub. We are going to be looking at data from Dr. Cooper's dissertation concerning Afrotropical bird distributions [@cooper_biogeographic_2021]. This website is in the data folder on this websites' GitHub page, [accessible here](https://github.com/jacobccooper/biol105_unk/blob/main/datasets/lacustrine_range_size.csv).

```{r}
# read comma separated file (csv) into R memory
# reads directly from URL
ranges <- read_csv("https://raw.githubusercontent.com/jacobccooper/biol305_unk/main/datasets/lacustrine_range_size.csv")
```

Alternatively, we can use the operator `|>` to simplify this process. `|>` means "take whatever you got from the previous step and *pipe* it into the next step". So, the following does the exact same thing:

```{r}
ranges <- "https://raw.githubusercontent.com/jacobccooper/biol305_unk/main/datasets/lacustrine_range_size.csv" |>
  read_csv()
```

Using the `|>` is preferred as you can better set up a workflow and because it more closely mimics other coding languages, such as `bash`.

Let's view the data to see if it worked. We can use the command `head` to view the first few rows:

```{r}
head(ranges)
```

We can perform a lot of summary statistics in *R*. Some of these we can view for multiple columns at once using `summary`.

```{r}
summary(ranges)
```

As seen above, we now have information for the following statistics for each variable:

-   `Min` = minimum
-   `1st Qu.` = 1st quartile
-   `Median` = middle of the dataset
-   `Mean` = average of the dataset
-   `3rd Qu.` = 3rd quartile
-   `Max.` = maximum

We can also calculate some of these statistics manually to see if we are doing everything correctly. It is easiest to do this by using predefined functions in *R* (code others have written to perform a particular task) or to create our own functions in *R*. We will do both to determine the average of `combined_current_km2`.

### Subsetting data

First, we need to select only the column of interest. In *R*, we have two ways of subsetting data to get a particular column.

-   `var[rows,cols]` is a way to look at a particular object (`var` in this case) and choose a specific combination of `row` number and `column` number (`col`). This is great if you know a specific index, but it is better to use a specific name.
-   `var[rows,"cols"]` is a way to do the above but by using a specific column name, like `combined_current_km2`.
-   `var$colname` is a way to call the specific column name directly from the dataset.

```{r}
# using R functions

ranges$combined_current_km2
```

As shown above, calling the specific column name with `$` allows us to see only the data of interest. We can also save these data as an object.

```{r}
current_combined <- ranges$combined_current_km2

current_combined
```

Now that we have it as an object, specifically a numeric vector, we can perform whatever math operations we need to on the dataset.

```{r}
mean(current_combined)
```

Here, we can see the mean for the entire dataset. However, we should always round values to the same number of decimal points as the original data. We can do this with `round`.

```{r}
round(mean(current_combined),1) # round mean to one decimal
```

*Note* that the above has a nested set of commands. We can write this exact same thing as follows:

```{r}
# pipe mean through round
mean(current_combined)  |> 
  round(1)
```

Use the method that is easiest for you to follow!

We can also calculate the mean manually. The mean is $\frac{\sum_{i=1}^nx}{n}$, or the sum of all the values within a vector divided by the number of values in that vector.

```{r}
# create function
# use curly brackets to denote function
# our data goes in place of "x" when finally run
our_mean <- function(x){
  sum_x <- sum(x) # sum all values in vector
  n <- length(x) # get length of vector
  xbar <- sum_x/n # calculate mean
  return(xbar) # return the value outside the function
}
```

Let's try it.

```{r}
our_mean(ranges$combined_current_km2)
```

As we can see, it works just the same as `mean`! We can round this as well.

```{r}
our_mean(ranges$combined_current_km2) |> 
  round(1)
```

## Your turn!

**With a partner or on your own**, try to do the following:

1.  Create an *RMarkdown document* that will save as an `.html`.
2.  Load the data, as shown here, and print the summary statistics in the document.
3.  Calculate the value of `combined_current_km2` divided by `2050_combined_km2` and print the results.
4.  `knit` your results, with your name(s) and date, as an HTML document.

Let me know if you have any issues.
